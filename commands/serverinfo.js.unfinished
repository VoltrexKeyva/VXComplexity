const { MessageEmbed, Util } = require('discord.js'),
  moment = require('moment'),
  stringToolkit = require('string-toolkit');

const boosterLevels = [2, 15, 30];
const capitalize = (string) => `${string[0].toUpperCase()}${string.slice(1).toLowerCase()}`;

module.exports = {
  name: 'serverinfo',
  description: 'Shows information about the server the command is used in.',
  usage: 'serverinfo',
  aliases: ['si'],
  category: 'general',
  permissions: [],
  async execute(message, args, bot) {
    let boostLevel;
    switch (message.guild.premiumTier) {
      case 0:
        boostLevel = null;
        break;
      case 1:
        boostLevel = {
          emoji: '<:BoostLevel1:789531741853319218>',
          url:
            'https://cdn.discordapp.com/attachments/746815223947722802/789533300820934696/BoostLevel1.png'
        };
        break;
      case 2:
        boostLevel = {
          emoji: '<:BoostLevel2:789531970961932338>',
          url:
            'https://cdn.discordapp.com/attachments/746815223947722802/789533302263906324/BoostLevel2.png'
        };
        break;
      case 3:
        boostLevel = {
          emoji: '<:BoostLevel3:789532099299639297>',
          url:
            'https://cdn.discordapp.com/attachments/746815223947722802/789533303405150249/BoostLevel3.png'
        };
    }

    const owner = await message.guild.members.fetch(message.guild.ownerID);

    let boostEmojiCount;
    switch (message.guild.premiumTier) {
      case 0:
        boostEmojiCount = '100';
        break;
      case 1:
        boostEmojiCount = '200';
        break;
      case 2:
        boostEmojiCount = '300';
        break;
      case 3:
        boostEmojiCount = '500';
    }

    if (message.guild.members.cache.size !== message.guild.memberCount) {
      const loading = await message.channel.send(
        '<a:Loading:789534862536605696> Fetching guild members...'
      );

      await message.guild.members.fetch({
        withPresences: true
      });

      if (!loading.deleted) await loading.delete();
    }

    const guildIcon = message.guild.iconURL({
        dynamic: true,
        size: 1024,
        format: 'png'
      }),
      serverEmbeds = [],
      created = moment.utc(message.guild.createdTimestamp);

    const mainInfoEmbed = new MessageEmbed()
      .setColor('#0033ff')
      .setAuthor('Server information', guildIcon)
      .addField(
        'Name',
        `${boostLevel ? `${boostLevel.emoji} ` : ''}${Util.escapeMarkdown(
          message.guild.name
        )}${
          message.guild.partnered
            ? ' <:PartneredServer:789537528440946708>'
            : ''
        }${
          message.guild.verified ? ' <:VerifiedServer:789538464605143070>' : ''
        }`,
        false
      )
      .addField('ID', message.guild.id, true)
      .addField(
        'Verification level',
        `${capitalize(
          message.guild.verificationLevel.toLowerCase().replace(/\_/g, ' ')
        )}`,
        true
      )
      .addField('Region', capitalize(message.guild.region), true)
      .addField(
        'Explicit content filter',
        capitalize(message.guild.explicitContentFilter.replace(/\_/g, ' ')),
        true
      )
      .addField(
        'Created at',
        `${created.format(
          'ddd, MMM Do, YYYY h:mm:ss a'
        )} (${created.fromNow()})`,
        false
      )
      .addField(
        'Default message notifications',
        capitalize(message.guild.defaultMessageNotifications),
        true
      );

    if (message.guild.features.length)
      mainInfoEmbed.addField(
        'Features',
        message.guild.features
          .map((f) => capitalize(f.replace(/\_/g, ' ')).replace(/url/g, 'URL'))
          .join(', '),
        false
      );

    if (message.guild.vanityURLCode)
      mainInfoEmbed.addField(
        'Vanity URL',
        `https://discord.gg/${message.guild.vanityURLCode}`,
        false
      );

    mainInfoEmbed.addField(
      'Owner',
      `${Util.escapeMarkdown(owner.user.tag)} [${owner}]`,
      false
    );

    if (message.guild.description)
      mainInfoEmbed.setDescription(message.guild.description);

    const boosterS = message.guild.premiumSubscriptionCount === 1 ? '' : 's',
      boosters = message.guild.members.cache.filter(
        ({ premiumSinceTimestamp }) => !!premiumSinceTimestamp
      ),
      isPremiumLevelThree = message.guild.premiumTier === 3,
      boostersEmbed = message.guild.premiumSubscriptionCount
        ? new MessageEmbed()
            .setColor('#0033ff')
            .setAuthor('Boosters', guildIcon)
            .setDescription(
              `**${Util.escapeMarkdown(
                message.guild.name
              )}** has **${message.guild.premiumSubscriptionCount.toLocaleString()}** boost${boosterS} with **${boosters.size.toLocaleString()}** booster${
                boosters.size === 1 ? '' : 's'
              } which empowers the server to the boost level of **${
                message.guild.premiumTier
              }**.`
            )
            .addField(
              'Top 5 boosters',
              `\`\`\`js\n${boosters
                .array()
                .sort(
                  (a, b) => a.premiumSinceTimestamp - b.premiumSinceTimestamp
                )
                .slice(0, 5)
                .map((m, i) => {
                  const days = Math.trunc(
                    moment
                      .duration(Date.now() - m.premiumSinceTimestamp)
                      .asDays()
                  )
                  return `${i + 1}- ${
                    m.user.tag
                  } (Boosting for ${days.toLocaleString()} day${
                    days === 1 ? '' : 's'
                  })`
                })
                .join('\n')}\n\`\`\``,
              false
            )
            .addField(
              isPremiumLevelThree
                ? 'Max boost level'
                : `Next boost level (${message.guild.premiumTier} → ${
                    message.guild.premiumTier + 1
                  })`,
              isPremiumLevelThree
                ? `[${stringToolkit.createProgressBar(100, 100, {
                    elapsedChar: '•',
                    progressChar: '[•]',
                    emptyChar: '=',
                    barLength: 30
                  })}]`
                : `**${(
                    boosterLevels[message.guild.premiumTier] -
                    message.guild.premiumSubscriptionCount
                  ).toLocaleString()}** boost${boosterS} required to reach boost level **${
                    message.guild.premiumTier + 1
                  }**\n[${stringToolkit.createProgressBar(
                    message.guild.premiumSubscriptionCount,
                    boosterLevels[message.guild.premiumTier],
                    {
                      elapsedChar: '•',
                      progressChar: '[•]',
                      emptyChar: '=',
                      barLength: 30
                    }
                  )}]`,
              false
            )
        : null,
      channelSize = message.guild.channels.cache.size,
      isChannelSizeOne = channelSize === 1,
      channelsEmbed = new MessageEmbed()
        .setColor('#0033ff')
        .setAuthor('Channels', guildIcon)
        .setDescription(
          `There ${
            isChannelSizeOne ? 'is' : 'are'
          } **${channelSize.toLocaleString()}** channel${
            isChannelSizeOne ? '' : 's'
          } in this server.${
            message.guild.systemChannel
              ? `\n• **System channel:** ${message.guild.systemChannel}`
              : ''
          }${
            message.guild.afkChannel
              ? `\n• **AFK channel:** ${message.guild.afkChannel}${
                  message.guild.afkTimeout
                    ? ` (**Timeout:** ${bot.tools.parseTimeFromMs(
                        parseInt(`${message.guild.afkTimeout}000`)
                      )})`
                    : ''
                }`
              : ''
          }${
            message.guild.widgetChannel
              ? `\n• **Widget channel:** ${message.guild.widgetChannel}`
              : ''
          }${
            message.guild.embedChannel
              ? `\n• **Embed channel:** ${message.guild.embedChannel}`
              : ''
          }${
            message.guild.rulesChannel
              ? `\n• **Rules channel:** ${message.guild.rulesChannel}`
              : ''
          }${
            message.guild.publicUpdatesChannel
              ? `\n• **Public updates channel:** ${message.guild.publicUpdatesChannel}`
              : ''
          }`
        );

    if (boostLevel) boostersEmbed.setThumbnail(boostLevel.url);

    for (const channelType of ['text', 'voice', 'category', 'news', 'store']) {
      const channels = message.guild.channels.cache.filter(
        ({ type }) => type === channelType
      );

      if (!channels.size) continue;

      channelsEmbed.addField(
        `${capitalize(
          channelType
        )} channels (${channels.size.toLocaleString()})`,
        `${channels
          .array()
          .sort((a, b) => a.position - b.position)
          .slice(0, 15)
          .map(({ name }) => `\`${name}\``)
          .join(' | ')}${
          channels.size > 15
            ? ` and **${(
                channels.size - 15
              ).toLocaleString()}** more ${channelType} channel${
                channels.size - 15 === 1 ? '' : 's'
              }`
            : ''
        }`,
        false
      );
    }

    const roleSize = message.guild.roles.cache.size,
      rolesEmbed = new MessageEmbed()
        .setColor('#0033ff')
        .setAuthor('Roles', guildIcon)
        .setDescription(
          `This server has **${roleSize.toLocaleString()}** role${
            roleSize === 1 ? '' : 's'
          } with the highest role being ${message.guild.roles.highest}.\n(${[
            'hoist',
            'managed',
            'mentionable'
          ]
            .map(
              (p) =>
                `**${message.guild.roles.cache
                  .filter((r) => !!r[p])
                  .size.toLocaleString()}** ${p}`
            )
            .join(' • ')})`
        )
        .addField(
          'Roles',
          `${message.guild.roles.cache
            .array()
            .sort((a, b) => b.position - a.position)
            .slice(0, 25)
            .join(' | ')}${
            roleSize > 25
              ? ` and **${(roleSize - 25).toLocaleString()}** more role${
                  roleSize - 25 === 1 ? '' : 's'
                }`
              : ''
          }`,
          false
        );

    const emojiSize = message.guild.emojis.cache.size,
      emojisEmbed = emojiSize
        ? new MessageEmbed()
            .setColor('#0033ff')
            .setAuthor('Emojis', guildIcon)
            .setDescription(
              `This server has **${emojiSize.toLocaleString()}** emoji${
                emojiSize === 1 ? '' : 's'
              } out of **${boostEmojiCount}** in this server.`
            )
        : null;

    if (emojiSize) {
      const staticEmojis = message.guild.emojis.cache.filter(
          (e) => !e.animated
        ),
        staticSize = staticEmojis.size;

      if (staticSize)
        emojisEmbed.addField(
          `Static emojis (${staticSize.toLocaleString()})`,
          `${staticEmojis.array().slice(0, 5).join(' | ')}${
            staticSize > 5
              ? ` and **${(
                  staticSize - 5
                ).toLocaleString()}** more static emoji${
                  staticSize === 1 ? '' : 's'
                }`
              : ''
          }`,
          false
        );

      const animatedEmojis = message.guild.emojis.cache.filter(
          (e) => e.animated
        ),
        animatedSize = animatedEmojis.size;

      if (animatedSize)
        emojisEmbed.addField(
          `Animated emojis (${animatedSize.toLocaleString()})`,
          `${animatedEmojis.array().slice(0, 5).join(' | ')}${
            animatedSize > 5
              ? ` and **${(
                  animatedSize - 5
                ).toLocaleString()}** more animated emoji${
                  animatedSize === 1 ? '' : 's'
                }`
              : ''
          }`,
          false
        );
    }

    const membersEmbed = new MessageEmbed()
      .setColor('#0033ff')
      .setAuthor('Members', guildIcon)
      .setDescription(
        `**${message.guild.memberCount.toLocaleString()}** members are in this server with **${message.guild.members.cache.size.toLocaleString()}** being held in the cache.\n(Users **${message.guild.members.cache
          .filter((m) => !m.user.bot)
          .size.toLocaleString()}** | Bots **${message.guild.members.cache
          .filter((m) => m.user.bot)
          .size.toLocaleString()}**)`
      );

    if (
      message.guild.approximateMemberCount ||
      message.guild.approximatePresenceCount ||
      message.guild.maximumMembers ||
      message.guild.maximumPresences
    )
      membersEmbed.addField(
        'Additional information',
        `${
          message.guild.approximateMemberCount
            ? `\n• **Approximate member count:** ${message.guild.approximateMemberCount.toLocaleString()}`
            : ''
        }${
          message.guild.maximumMembers
            ? `\n• **Maximum members:** ${message.guild.maximumMembers.toLocaleString()}`
            : ''
        }${
          message.guild.approximatePresenceCount
            ? `\n• **Approximate presence count:** ${message.guild.approximatePresenceCount.toLocaleString()}`
            : ''
        }${
          message.guild.maximumPresences
            ? `\n• **Maximum presences:** ${message.guild.maximumPresences.toLocaleString()}`
            : ''
        }`,
        false
      );

    const guildIconEmbed = message.guild.icon
        ? new MessageEmbed()
            .setColor('#0033ff')
            .setAuthor('Server icon', guildIcon)
            .setImage(
              message.guild.iconURL({
                dynamic: true,
                size: 2048,
                format: 'png'
              })
            )
        : null,
      guildBannerEmbed = message.guild.banner
        ? new MessageEmbed()
            .setColor('#0033ff')
            .setAuthor('Server banner', guildIcon)
            .setImage(
              message.guild.bannerURL({
                dynamic: true,
                size: 2048,
                format: 'png'
              })
            )
        : null,
      guildSplashEmbed = message.guild.splash
        ? new MessageEmbed()
            .setColor('#0033ff')
            .setAuthor('Server splash', guildIcon)
            .setImage(
              message.guild.splashURL({
                dynamic: true,
                size: 2048,
                format: 'png'
              })
            )
        : null,
      guildDiscoverySplashEmbed = message.guild.discoverySplash
        ? new MessageEmbed()
            .setColor('#0033ff')
            .setAuthor('Server discovery splash', guildIcon)
            .setImage(
              message.guild.discoverySplashURL({
                dynamic: true,
                size: 2048,
                format: 'png'
              })
            )
        : null;

    serverEmbeds.push(
      ...[
        mainInfoEmbed,
        boostersEmbed,
        channelsEmbed,
        rolesEmbed,
        emojisEmbed,
        membersEmbed,
        guildIconEmbed,
        guildBannerEmbed,
        guildSplashEmbed,
        guildDiscoverySplashEmbed
      ].filter((e) => !!e)
    );

    return bot.tools.paginate(message, {
      type: 'embed',
      messages: serverEmbeds,
      time: 180000
    });
  }
};